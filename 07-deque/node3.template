// FILE: node3.template
// AUTHOR:  M Morella
// Based on node2.h, written by M. Main & W. Savitch

// Implementation for doubly-linked node class.

#include <cassert>  // Provides assert
#include <cstdlib>  // Provides NULL and size_t

namespace main_savitch_6B {
template <class Item>
void list_clear(node<Item>*& head_ptr) {
  while (head_ptr != NULL) list_head_remove(head_ptr);
}

template <class Item>
void list_copy(const node<Item>* source_ptr, node<Item>*& head_ptr,
               node<Item>*& tail_ptr) {
  head_ptr = NULL;
  tail_ptr = NULL;

  // Handle the case of the empty list
  if (source_ptr == NULL) return;

  // Make the head node for the newly created list, and put data in it
  list_head_insert(head_ptr, source_ptr->data());
  tail_ptr = head_ptr;

  // Copy rest of the nodes one at a time, adding at the tail of new list
  source_ptr = source_ptr->next();
  while (source_ptr != NULL) {
    list_insert(tail_ptr, source_ptr->data());
    tail_ptr = tail_ptr->next();
    source_ptr = source_ptr->next();
  }
}

template <class Item>
void list_head_insert(node<Item>*& head_ptr, const Item& entry) {
  node<Item>* old_head = head_ptr;
  node<Item>* new_node = new node<Item>(NULL, entry, old_head);
  if (old_head != NULL) {
    old_head->set_prev(new_node);
  }
  head_ptr = new_node;
}

template <class Item>
void list_head_remove(node<Item>*& head_ptr) {
  node<Item>* remove_ptr = head_ptr;
  head_ptr = head_ptr->next();
  if (head_ptr != NULL) {
    head_ptr->set_prev(NULL);
  }
  delete remove_ptr;
}

template <class Item>
void list_tail_insert(node<Item>*& tail_ptr, const Item& entry) {
  node<Item>* new_node = new node<Item>(tail_ptr, entry, NULL);
  if (tail_ptr != NULL) {
    tail_ptr->set_next(new_node);
  }
  tail_ptr = new_node;
}

template <class Item>
void list_tail_remove(node<Item>*& tail_ptr) {
  node<Item>* remove_ptr = tail_ptr;
  tail_ptr = tail_ptr->prev();
  if (tail_ptr != NULL) {
    tail_ptr->set_next(NULL);
  }
  delete remove_ptr;
}

template <class Item>
void list_insert(node<Item>* previous_ptr, const Item& entry) {
  node<Item>* insert_ptr;
  insert_ptr = new node<Item>(previous_ptr, entry, previous_ptr->next());
  previous_ptr->set_next(insert_ptr);
}

template <class Item>
void list_attach(node<Item>* next_ptr, const Item& entry) {
  node<Item>* insert_ptr;
  insert_ptr = new node<Item>(next_ptr->prev(), entry, next_ptr);
  next_ptr->set_prev(insert_ptr);
}

template <class Item>
std::size_t list_length(const node<Item>* head_ptr) {
  const node<Item>* cursor;
  std::size_t answer;

  answer = 0;
  for (cursor = head_ptr; cursor != NULL; cursor = cursor->next()) ++answer;

  return answer;
}

template <class NodePtr, class SizeType>
NodePtr list_locate(NodePtr head_ptr, SizeType position) {
  NodePtr cursor;
  SizeType i;

  assert(0 < position);
  cursor = head_ptr;
  for (i = 1; (i < position) && (cursor != NULL); ++i) cursor = cursor->next();
  return cursor;
}

template <class Item>
void list_remove(node<Item>* previous_ptr) {
  // function remains for backwards compatibility, but relies on
  list_remove_current(previous_ptr->next());
}

template <class Item>
void list_remove_current(node<Item>* current_ptr) {
  node<Item>* prev_ptr = current_ptr->prev();
  node<Item>* next_ptr = current_ptr->next();
  if (prev_ptr != NULL) {
    prev_ptr->set_next(next_ptr);
  }
  if (next_ptr != NULL) {
    next_ptr->set_prev(prev_ptr);
  }
  delete current_ptr;
}

template <class NodePtr, class Item>
NodePtr list_search(NodePtr head_ptr, const Item& target) {
  NodePtr cursor;

  for (cursor = head_ptr; cursor != NULL; cursor = cursor->next())
    if (target == cursor->data()) return cursor;
  return NULL;
}
}  // namespace main_savitch_6B
